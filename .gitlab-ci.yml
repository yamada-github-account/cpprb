variables: &global-variables
  CXX: "g++ -std=c++17 -O3 -march=native -Wall -Wextra -Icpprb -pthread"
  CC: "g++ -std=c++17 -O3 -march=native -Wall -Wextra -Icpprb -pthread"
  COVERAGE_RCFILE: .coveragerc
  DOCKER_BUILDKIT: 1
  GIT_DEPTH: 10
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip"

stages:
  - build_image
  - build
  - test
  - test_coverage
  - bench_mark_test
  - page_build
  - page_deploy
  - binary_build
  - upload

.job_template: &setup
  image: &dev_image $CI_REGISTRY_IMAGE/build:latest
  before_script:
    - g++ --version
    - python3 --version
  except:
    - schedules

.test_template: &py_setup
  image: *dev_image
  stage: test
  before_script:
    - g++ --version
    - python3 --version
    - DEBUG_CPPRB=1 pip3 install $(echo dist/*.whl)['all']
  except:
    - schedules
  artifacts:
    paths:
      - .coverage.*
      - "*.xml"
    reports:
      junit:
        - "*.xml"

.docker_build_base: &docker_build
  image: docker:latest
  stage: build_image
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/build:latest || true
    - docker build --pull=true --cache-from $CI_REGISTRY_IMAGE/build:latest -t $CI_REGISTRY_IMAGE/build:latest .
    - docker push $CI_REGISTRY_IMAGE/build:latest

docker_build_schedule:
  <<: *docker_build
  only:
    - schedules

docker_build_manual:
  <<: *docker_build
  when: manual
  except:
    - schedules

.bench_mark_base: &bench_mark
  image: docker:latest
  stage: build_image
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/bench:latest || true
    - cd benchmark
    - docker build --pull=true --cache-from $CI_REGISTRY_IMAGE/bench:latest -t $CI_REGISTRY_IMAGE/bench:latest .
    - docker push $CI_REGISTRY_IMAGE/bench:latest

bench_mark_schedule:
  <<: *bench_mark
  only:
    - schedules

bench_mark_manual:
  <<: *bench_mark
  when: manual
  except:
    - schedules

.bench_mark_base2: &bench_mark2
  image: docker:latest
  stage: build_image
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/bench2:latest || true
    - cd benchmark2
    - docker build --pull=true --cache-from $CI_REGISTRY_IMAGE/bench2:latest -t $CI_REGISTRY_IMAGE/bench2:latest .
    - docker push $CI_REGISTRY_IMAGE/bench2:latest

bench_mark_schedule2:
  <<: *bench_mark2
  only:
    - schedules

bench_mark_manual2:
  <<: *bench_mark2
  when: manual
  except:
    - schedules

cpprb_build:
  <<: *setup
  stage: build
  script:
    - DEBUG_CPPRB=1 python3 setup.py build_ext --inplace --force
    - DEBUG_CPPRB=1 python3 setup.py bdist_wheel
  artifacts:
    paths:
      - cpprb/*.html
      - cpprb/*.cpp
      - cpprb/*.so
      - dist/*.whl

ReplayBuffer.cpp:
  <<: *setup
  stage: test
  script:
    - $CXX -o test/ReplayBuffer test/ReplayBuffer.cpp
    - test/ReplayBuffer

SegmentTree.cpp:
  <<: *setup
  stage: test
  script:
    - $CXX -o test/SegmentTree test/SegmentTree.cpp
    - test/SegmentTree

ReplayBuffer:
  <<: *py_setup
  script:
    - coverage run -m xmlrunner test/PyReplayBuffer.py

issue:
  <<: *py_setup
  script:
    - coverage run -m xmlrunner test/issue.py

multi_rew:
  <<: *py_setup
  script:
    - coverage run -m xmlrunner test/multi_rew.py

high_level_api:
  <<: *py_setup
  script:
    - coverage run -m xmlrunner test/HighLevelAPI.py

features:
  <<: *py_setup
  script:
    - coverage run -m xmlrunner test/features.py

v8:
  <<: *py_setup
  script:
    - coverage run -m xmlrunner test/v8.py

util:
  <<: *py_setup
  script:
    - coverage run -m xmlrunner test/util.py

train:
  <<: *py_setup
  script:
    - coverage run -m xmlrunner test/train.py

coverage:
  <<: *setup
  stage: test_coverage
  script:
    - mkdir -p public/coverage
    - coverage combine
    - coverage report
    - coverage html -d public/coverage
  artifacts:
    paths:
      - public/coverage
  coverage: '/^TOTAL.*\s+(\d+\%)$/'

emacs:
  image: iquiw/alpine-emacs
  stage: build
  script:
    - emacs --debug-init --batch README.org -l site/init.el --eval '(org-hugo-export-wim-to-md :all-subtrees nil t)'
    - emacs --debug-init --batch CHANGELOG.org -l site/init.el --eval '(org-hugo-export-wim-to-md :all-subtrees nil t)'
    - cd site
    - emacs --debug-init --batch site.org -l init.el --eval '(org-hugo-export-wim-to-md :all-subtrees nil t)'
  artifacts:
    paths:
      - site/content
  except:
    - schedules

README_MD:
  image: iquiw/alpine-emacs
  stage: build
  script:
    - emacs --batch README.org --eval '(org-md-export-to-markdown)'
  artifacts:
    paths:
      - README.md
  except:
    - schedules

run_bench_mark:
  image: $CI_REGISTRY_IMAGE/bench:latest
  stage: bench_mark_test
  script:
    - pip install $(echo dist/*.whl)
    - cd benchmark
    - python benchmark.py
  artifacts:
    paths:
      - "benchmark/*.png"
  needs:
    - job: coverage
      artifacts: false
    - job: cpprb_build

run_bench_mark2:
  image: $CI_REGISTRY_IMAGE/bench2:latest
  stage: bench_mark_test
  script:
    - pip install $(echo dist/*.whl)
    - cd benchmark2
    - python benchmark.py
  artifacts:
    paths:
      - "benchmark2/*.png"
  needs:
    - job: coverage
      artifacts: false
    - job: cpprb_build

hugo:
  image: registry.gitlab.com/pages/hugo:latest
  stage: page_build
  variables:
    <<: *global-variables
    GIT_SUBMODULE_STRATEGY: recursive
  environment: production
  script:
    - hugo version
    - cd site
    - hugo -c content -v
  artifacts:
    paths:
      - public
  needs:
    - emacs
  except:
    - schedules

sphinx:
  image: *dev_image
  stage: page_build
  environment: production
  script:
    - pip install $(echo dist/*.whl)['all']
    - sphinx-build -b html sphinx public/api
  artifacts:
    paths:
      - sphinx/*.rst
      - public
  needs:
    - cpprb_build
  except:
    - schedules

pages:
  image: alpine
  stage: page_deploy
  environment: production
  script:
    - mkdir -p public/annotation
    - mv cpprb/*.html public/annotation/
    - mkdir -p public/benchmark
    - mv benchmark/*.png public/benchmark/
    - mv benchmark2/*.png public/benchmark/
  artifacts:
    paths:
      - public
  only:
    - master
  except:
    - schedules

pypi:
  image: *dev_image
  stage: upload
  environment: production
  script:
    - rm -rf cpprb/*.cpp
    - python3 setup.py clean
    - python3 setup.py build_ext sdist
    - twine upload dist/cpprb-*.tar.gz
    - twine upload wheelhouse-fix/cpprb-*.whl
  only:
    - tags
  except:
    - branches
    - schedules
  needs:
    - manylinux
    - README_MD

repo:
  image: docker:latest
  stage: upload
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/build:latest
    - docker tag $CI_REGISTRY_IMAGE/build:latest $CI_REGISTRY_IMAGE/build:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE/build:$CI_COMMIT_TAG
  only:
    - tags
  except:
    - branches
    - schedules

manylinux:
  image: quay.io/pypa/manylinux2010_x86_64
  stage: binary_build
  script:
    - for PIP in /opt/python/cp3{5..8}*/bin/pip; do ${PIP} wheel . -w wheelhouse/; done
    - for WHL in wheelhouse/*.whl; do auditwheel repair ${WHL} -w wheelhouse-fix; done
  artifacts:
    paths:
      - "wheelhouse-fix/cpprb-*.whl"
  except:
    - schedules
  needs:
    - job: coverage
      artifacts: false
    - job: README_MD
      artifacts: true
  cache:
    paths:
      - "$CI_PROJECT_DIR/.pip"
    key: "${CI_PROJECT_PATH}-BINARY-BUILD"
